import plotly.express as px
import pandas as  pd
from dash import Dash, dcc, html, Input, Output
df = pd.read_csv('ecommerce_estatistica.csv')
print(df.head().to_string())


def cria_graficos(df):
    # Histograma
    fig1 = px.histogram(df, x='Gênero', nbins=30, title='Distribuição por Gênero')

    # Gráfico Pizza
    fig2 = px.pie(df, names='Temporada', color='Temporada', hole=0.2,
                  color_discrete_sequence=px.colors.sequential.RdBu)
    fig2.update_layout(title='Peças por Temporada')

    # Gráfico de bolhas
    fig3 = px.scatter(df, x='Desconto', y='Nota', size='N_Avaliações', size_max=60)
    fig3.update_layout(title='Desconto por Nota e Número de Avaliações')

    # Gráfico de Linha
    fig4 = px.line(df, x='N_Avaliações', y='Nota', color='Desconto', facet_col='Nota')
    fig4.update_layout(
        title='Número de Avaliações por Nota e Desconto para cada Nota',
        xaxis_title='N_Avaliações',
        yaxis_title='Nota'

    )

    # Mapa de calor
    df_corr = df[['Nota', 'N_Avaliações', 'Desconto']].corr()

    fig5 = px.imshow(df_corr, text_auto=True, color_continuous_scale='Viridis',
        title='Mapa de Calor da Correlação entre Variáveis'
    )
    fig5.update_layout(
        title_font_size=16,
        title_x=0.5,
        coloraxis_colorbar=dict(title="Correlação"),
    )

    # Gráfico de Barra
    fig6 = px.bar(df, x='Material', y='Marca', color='Gênero', barmode='group',
                  color_discrete_sequence=px.colors.qualitative.D3, opacity=1)
    fig6.update_layout(
        title='Material por Marca e Gênero',
        xaxis_title='Material',
        yaxis_title='Marca',
        legend_title='Gênero',
        plot_bgcolor='rgba(222, 255, 253, 1)',  # Fundo interno
        paper_bgcolor='rgba(186, 245, 241, 1)'  # Fundo externo
    )
    return fig1, fig2, fig3, fig4, fig5, fig6


def cria_app(df):
    app = Dash(__name__)

    fig1, fig2, fig3, fig4, fig5, fig6 = cria_graficos(df)

    app.layout = html.Div([
        dcc.Graph(figure=fig1),
        dcc.Graph(figure=fig2),
        dcc.Graph(figure=fig3),
        dcc.Graph(figure=fig4),
        dcc.Graph(figure=fig5),
        dcc.Graph(figure=fig6)
    ])
    return app

# Executar o app
if __name__ == '__main__':
    app = cria_app(df)
    app.run_server(debug=True, port=8050)
